{"ast":null,"code":"import { firebase, FieldValue } from '../lib/firebase';\nexport async function doesUsernameExist(username) {\n  const result = await firebase.firestore().collection('users').where('username', '==', username.toLowerCase()).get();\n  return result.docs.length > 0;\n}\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\n  const user = result.docs.map(item => ({\n    ...item.data(),\n    docId: item.id\n  }));\n  return user;\n}\nexport async function getSuggestedProfiles(userId, following) {\n  const result = await firebase.firestore().collection('users').limit(10).get();\n  return result.docs.map(user => ({\n    ...user.data(),\n    docId: user.id\n  })).filter(profile => profile.userId !== userId && !following.includes(profile.userId));\n}\nexport async function updateLoggedInUserFollowing(loggedInUserDocId, profileId, isFollowingProfile) {\n  return firebase.firestore().collection('users').doc(loggedInUserDocId).update({\n    following: isFollowingProfile ? FieldValue.arrayRemove(profileId) : FieldValue.arrayUnion(profileId)\n  });\n}\nexport async function updateFollowedUserFollowers(profileDocId, loggedInUserDocId, isFollowingProfile) {\n  return firebase.firestore().collection('users').doc(profileDocId).update({\n    followers: isFollowingProfile ? FieldValue.arrayRemove(loggedInUserDocId) : FieldValue.arrayUnion(loggedInUserDocId)\n  });\n}\nexport async function getPhotos(userId, following) {\n  // [5,4,2] => following\n  const result = await firebase.firestore().collection('photos').where('userId', 'in', following).get();\n  const userFollowedPhotos = result.docs.map(photo => ({\n    ...photo.data(),\n    docId: photo.id\n  }));\n  const photosWithUserDetails = await Promise.all(userFollowedPhotos.map(async photo => {\n    let userLikedPhoto = false;\n    if (photo.likes.includes(userId)) {\n      userLikedPhoto = true;\n    }\n    // photo.userId = 2\n    const user = await getUserByUserId(photo.userId);\n    // raphael\n    const {\n      username\n    } = user[0];\n    return {\n      username,\n      ...photo,\n      userLikedPhoto\n    };\n  }));\n  return photosWithUserDetails;\n}","map":{"version":3,"names":["firebase","FieldValue","doesUsernameExist","username","result","firestore","collection","where","toLowerCase","get","docs","length","getUserByUserId","userId","user","map","item","data","docId","id","getSuggestedProfiles","following","limit","filter","profile","includes","updateLoggedInUserFollowing","loggedInUserDocId","profileId","isFollowingProfile","doc","update","arrayRemove","arrayUnion","updateFollowedUserFollowers","profileDocId","followers","getPhotos","userFollowedPhotos","photo","photosWithUserDetails","Promise","all","userLikedPhoto","likes"],"sources":["C:/Users/____________________/.vscode/веб 3 лаба ЯЯЯ/websec-3/instagram-clone/src/services/firebase.js"],"sourcesContent":["import { firebase, FieldValue } from '../lib/firebase';\r\n\r\nexport async function doesUsernameExist(username) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection('users')\r\n    .where('username', '==', username.toLowerCase())\r\n    .get();\r\n\r\n  return result.docs.length > 0;\r\n}\r\n\r\nexport async function getUserByUserId(userId) {\r\n  const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\r\n  const user = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id\r\n  }));\r\n\r\n  return user;\r\n}\r\n\r\nexport async function getSuggestedProfiles(userId, following) {\r\n  const result = await firebase.firestore().collection('users').limit(10).get();\r\n\r\n  return result.docs\r\n  .map((user) => ({ ...user.data(), docId: user.id}))\r\n  .filter((profile) => profile.userId !== userId && !following.includes(profile.userId));\r\n}\r\n\r\nexport async function updateLoggedInUserFollowing(\r\n  loggedInUserDocId,\r\n  profileId,\r\n  isFollowingProfile\r\n) {\r\n  return firebase\r\n    .firestore()\r\n    .collection('users')\r\n    .doc(loggedInUserDocId)\r\n    .update({\r\n      following: isFollowingProfile \r\n        ? FieldValue.arrayRemove(profileId) \r\n        : FieldValue.arrayUnion(profileId)\r\n    });\r\n}\r\n\r\nexport async function updateFollowedUserFollowers(\r\n  profileDocId,\r\n  loggedInUserDocId,\r\n  isFollowingProfile \r\n) {\r\n  return firebase\r\n    .firestore()\r\n    .collection('users')\r\n    .doc(profileDocId)\r\n    .update({\r\n      followers: isFollowingProfile \r\n        ? FieldValue.arrayRemove(loggedInUserDocId) \r\n        : FieldValue.arrayUnion(loggedInUserDocId)\r\n    });\r\n}\r\n\r\nexport async function getPhotos(userId, following) {\r\n  // [5,4,2] => following\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection('photos')\r\n    .where('userId', 'in', following)\r\n    .get();\r\n\r\n  const userFollowedPhotos = result.docs.map((photo) => ({\r\n    ...photo.data(),\r\n    docId: photo.id\r\n  }));\r\n\r\n  const photosWithUserDetails = await Promise.all(\r\n    userFollowedPhotos.map(async (photo) => {\r\n      let userLikedPhoto = false;\r\n      if (photo.likes.includes(userId)) {\r\n        userLikedPhoto = true;\r\n      }\r\n      // photo.userId = 2\r\n      const user = await getUserByUserId(photo.userId);\r\n      // raphael\r\n      const { username } = user[0];\r\n      return { username, ...photo, userLikedPhoto };\r\n    })\r\n  );\r\n\r\n  return photosWithUserDetails;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}